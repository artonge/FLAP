server {
	server_name video.$PEERTUBE_DOMAIN_NAME;

	listen 443 ssl http2;
	listen [::]:443 ssl http2;

	# If you have a small /var/lib partition, it could be interesting to store temp nginx uploads in a different place
	# See https://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_temp_path
	# client_body_temp_path /var/www/peertube/storage/nginx/;

	# Bypass PeerTube for performance reasons. Could be removed
	location ~ ^/client/(.*\.(js|css|png|svg|woff2|otf|ttf|woff|eot))$ {
		include /etc/nginx/parts.d/gzip.inc;
		access_log off;
		add_header Cache-Control "public, max-age=31536000, immutable";

		alias /var/www/peertube/peertube-latest/client/dist/$1;
	}

	# FLAP's custom medias directory for peertube.
	location ~ ^/peertube_medias/(.+\.(?:gif|jpe?g|png))$ {
		include /etc/nginx/parts.d/gzip.inc;
		access_log off;
		alias /var/www/peertube_medias/$1;
	}

	# Bypass PeerTube for performance reasons. Could be removed
	location ~ ^/static/(thumbnails|avatars)/ {
		if ($request_method = 'OPTIONS') {
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
			add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
			add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Type' 'text/plain charset=UTF-8';
			add_header 'Content-Length' 0;
			return 204;
		}

		add_header 'Access-Control-Allow-Origin' '*';
		add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
		add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

		# Cache 2 hours
		add_header Cache-Control "public, max-age=7200";

		root /var/www/peertube_data;

		rewrite ^/static/(thumbnails|avatars)/(.*)$ /$1/$2 break;
		try_files $uri /;
	}

	location / {
		# Use resolver and variable to prevent nginx to crash when it does not found the upstream host.
		resolver 127.0.0.11 valid=30s;
		set $upstream_peertube peertube;
		proxy_pass http://$upstream_peertube:9000;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header Host $host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		# This is the maximum upload size, which roughly matches the maximum size of a video file
		# you can send via the API or the web interface. By default this is 8GB, but administrators
		# can increase or decrease the limit. Currently there's no way to communicate this limit
		# to users automatically, so you may want to leave a note in your instance 'about' page if
		# you change this.
		#
		# Note that temporary space is needed equal to the total size of all concurrent uploads.
		# This data gets stored in /var/lib/nginx by default, so you may want to put this directory
		# on a dedicated filesystem.
		#
		client_max_body_size 8G;

		proxy_connect_timeout       600;
		proxy_send_timeout          600;
		proxy_read_timeout          600;
		send_timeout                600;
	}

	# Bypass PeerTube for performance reasons. Could be removed
	location ~ ^/static/(webseed|redundancy|streaming-playlists)/ {
		# Clients usually have 4 simultaneous webseed connections, so the real limit is 3MB/s per client
		set $peertube_limit_rate 800k;

		# Increase rate limit in HLS mode, because we don't have multiple simultaneous connections
		if ($request_uri ~ -fragmented.mp4$) {
			set $peertube_limit_rate 5000k;
		}

		# Use this with nginx >= 1.17.0
		# limit_rate $peertube_limit_rate;
		# Or this if your nginx < 1.17.0
		set $limit_rate $peertube_limit_rate;
		limit_rate_after 5000k;

		if ($request_method = 'OPTIONS') {
		 	add_header 'Access-Control-Allow-Origin' '*';
		 	add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
		 	add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
		 	add_header 'Access-Control-Max-Age' 1728000;
		 	add_header 'Content-Type' 'text/plain charset=UTF-8';
		 	add_header 'Content-Length' 0;
		 	return 204;
		}

		if ($request_method = 'GET') {
		 	add_header 'Access-Control-Allow-Origin' '*';
		 	add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
		 	add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

		 	# Don't spam access log file with byte range requests
		 	access_log off;
		}

		root /var/www/peertube_data;

		# Use this in tandem with fuse-mounting i.e. https://docs.joinpeertube.org/#/admin-remote-storage
		# to serve files directly from a public bucket without proxying.
		# Assumes you have buckets named after the storage subdirectories, i.e. 'videos', 'redundancy', etc.
		#set $cdn <your S3-compatiable bucket public url mounted via fuse>;
		#rewrite ^/static/webseed/(.*)$ $cdn/videos/$1 redirect;
		#rewrite ^/static/redundancy/(.*)$ $cdn/redundancy/$1 redirect;
		#rewrite ^/static/streaming-playlists/(.*)$ $cdn/streaming-playlists/$1 redirect;

		rewrite ^/static/webseed/(.*)$ /videos/$1 break;
		rewrite ^/static/redundancy/(.*)$ /redundancy/$1 break;
		rewrite ^/static/streaming-playlists/(.*)$ /streaming-playlists/$1 break;

		try_files $uri /;
	}

	# Websocket tracker
	location /tracker/socket {
		# Peers send a message to the tracker every 15 minutes
		# Don't close the websocket before this time
		proxy_read_timeout 1200s;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
		proxy_http_version 1.1;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $host;
		# Use resolver and variable to prevent nginx to crash when it does not found the upstream host.
		resolver 127.0.0.11 valid=30s;
		set $upstream_peertube peertube;
		proxy_pass http://$upstream_peertube:9000;
	}

	location /socket.io {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $host;

		# Use resolver and variable to prevent nginx to crash when it does not found the upstream host.
		resolver 127.0.0.11 valid=30s;
		set $upstream_peertube peertube;
		proxy_pass http://$upstream_peertube:9000;

		# enable WebSockets
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
	}
}
