include:
    # Auto devop
    - template: Auto-DevOps.gitlab-ci.yml

variables:
    GIT_SUBMODULE_STRATEGY: recursive

# Check shell scripts sanity.
shellcheck:
    image: koalaman/shellcheck-alpine:latest
    stage: test
    script:
        - apk add git
        - git ls-files --exclude='*.sh' --ignored | xargs shellcheck --external-sources --shell=bash

# Check shell scripts executability.
test_script_executable:
    image: ubuntu
    stage: test
    script:
        - apt-get update
        - apt-get install -y git
        - git ls-files --exclude='*.sh' --ignored | xargs -I{} ls -aslh {}
        - git ls-files --exclude='*.sh' --ignored | xargs -I{} test -x {}

# Run start_flap and CLI unit tests
system_test:
    only: [branches]
    stage: test
    image: docker:stable
    services: ["docker:dind"]
    script:
        # Start a flap instance with mappings to real folders.
        # We need mappings to real folders because docker will resolve its mappings using the real file system.
        # https://stackoverflow.com/questions/46437147/gitlab-ci-docker-in-docker-cant-create-volume
        - >
            docker run \
                --detach \
            \
                --name flap \
            \
                --env FLAG_NO_CLEAN_DOCKER=true \
                --env FLAG_NO_RAID_SETUP=true \
                --env FLAG_NO_NETWORK_SETUP=true \
                --env FLAG_NO_TLS_GENERATION=true \
                --env FLAG_INSECURE_SAML_FETCH=true \
            \
                --env LOG_DRIVER=json-file \
            \
                --volume /var/run/docker.sock:/var/run/docker.sock \
            \
                --volume $CI_PROJECT_DIR:$CI_PROJECT_DIR \
                --volume $CI_BUILDS_DIR/flap_data:$CI_BUILDS_DIR/flap_data \
            \
                --env FLAP_DIR=$CI_PROJECT_DIR \
                --env FLAP_DATA=$CI_BUILDS_DIR/flap_data \
            \
                $CI_REGISTRY_IMAGE/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA} \
                /bin/sh -c "while true; do sleep 1000; done"

        - docker exec flap flapctl start
        - docker exec flap flapctl test setup tls

# Run start from a previous flap version.
# Then run the update procedure the the targeted commit or tag.
.update_test:
    stage: test
    image: docker:stable
    services:
        - name: docker:dind
          alias: flap.local flap.localhost auth.flap.localhost files.flap.localhost mail.flap.localhost
    script:
        # Get DinD's ip.
        - FLAP_IP=$(cat /etc/hosts | grep flap.local | cut -f1)

        - apk add git

        # Start a flap instance with mappings to real folders.
        # We need mappings to real folders because docker will resolve its mappings using the real file system.
        # https://stackoverflow.com/questions/46437147/gitlab-ci-docker-in-docker-cant-create-volume
        - >
            docker run \
                --detach \
            \
                --name flap_old \
            \
                --env FLAG_NO_CLEAN_DOCKER=true \
                --env FLAG_NO_RAID_SETUP=true \
                --env FLAG_NO_NETWORK_SETUP=true \
                --env FLAG_NO_TLS_GENERATION=true \
                --env FLAG_INSECURE_SAML_FETCH=true \
                --env FLAG_USE_FIXED_IP=true \
            \
                --network host \
                --add-host="flap.local:$FLAP_IP" \
                --add-host="flap.localhost:$FLAP_IP" \
                --add-host="auth.flap.localhost:$FLAP_IP" \
                --add-host="files.flap.localhost:$FLAP_IP" \
                --add-host="mail.flap.localhost:$FLAP_IP" \
            \
                --env LOG_DRIVER=json-file \
            \
                --volume /var/run/docker.sock:/var/run/docker.sock \
            \
                --volume $CI_BUILDS_DIR/flap_dir:$CI_BUILDS_DIR/flap_dir \
                --volume $CI_BUILDS_DIR/flap_data:$CI_BUILDS_DIR/flap_data \
            \
                --env FLAP_DIR=$CI_BUILDS_DIR/flap_dir \
                --env FLAP_DATA=$CI_BUILDS_DIR/flap_data \
            \
                $CI_REGISTRY_IMAGE:$(eval $LATEST_TAG) \
                /bin/sh -c "while true; do sleep 1000; done"

        - mkdir -p $CI_BUILD_DIR/flap_data/system/data
        - echo "0.0.0.0" > $CI_BUILD_DIR/flap_data/system/data/fixed_ip.txt

        # Copy the code to the real folder.
        - docker exec flap_old cp -rT /opt/flap $CI_BUILDS_DIR/flap_dir

        # Update the flapctl link so it maps to the new location.
        - docker exec flap_old ln -sf $CI_BUILDS_DIR/flap_dir/system/cli/flapctl.sh /bin/flapctl

        # Start the instance.
        - docker exec flap_old flapctl start
        - docker exec flap_old flapctl users create_admin
        # - docker exec flap_old flapctl tls generate_localhost

        # Update the instance.
        - docker exec flap_old flapctl update $CI_COMMIT_REF_NAME

test_update_to_commit:
    extends: .update_test
    only: [branches]
    variables:
        LATEST_TAG: git tag --sort version:refname | tail -1

test_update_to_tag:
    extends: .update_test
    only: [tags]
    variables:
        LATEST_TAG: git tag --sort version:refname | grep -B 1 $CI_COMMIT_REF_NAME | grep -v $CI_COMMIT_REF_NAME

# We use flap.test instead of flap.localhost because chrome won't resolve *.localhost on another IP.
e2e:
    image: docker:stable
    only: [branches]
    services:
        - name: docker:dind
          alias: flap.local flap.test auth.flap.test files.flap.test mail.flap.test
    stage: test
    variables:
        SCREEN_WIDTH: "1920"
        SCREEN_HEIGHT: "1080"
    script:
        # Get DinD's ip.
        - FLAP_IP=$(cat /etc/hosts | grep flap.local | cut -f1)

        # Pass some flags env var.
        # Share the docker container network with this container so it can talk to itself.
        #  ==> the network ports are beeing serve from the DinD container, that can be reach from the docker container but not from this container if we do not share the host network stack.
        # Add entry to the /etc/hosts file to resolve flap.local and *.flap.test
        # Bind our working directories.
        - >
            docker run \
                --detach \
            \
                --name flap \
            \
                --env FLAG_NO_CLEAN_DOCKER=true \
                --env FLAG_NO_RAID_SETUP=true \
                --env FLAG_NO_NETWORK_SETUP=true \
                --env FLAG_NO_TLS_GENERATION=true \
                --env FLAG_INSECURE_SAML_FETCH=true \
                --env FLAG_USE_FIXED_IP=true \
            \
                --network host \
                --add-host="flap.local:$FLAP_IP" \
                --add-host="flap.test:$FLAP_IP" \
                --add-host="auth.flap.test:$FLAP_IP" \
                --add-host="files.flap.test:$FLAP_IP" \
                --add-host="mail.flap.test:$FLAP_IP" \
            \
                --env LOG_DRIVER=json-file \
            \
                --volume /var/run/docker.sock:/var/run/docker.sock \
            \
                --volume $CI_PROJECT_DIR:$CI_PROJECT_DIR \
                --volume $CI_BUILDS_DIR/flap_data:$CI_BUILDS_DIR/flap_data \
                --volume /etc/letsencrypt/live/flap:/etc/letsencrypt/live/flap \
            \
                --env FLAP_DIR=$CI_PROJECT_DIR \
                --env FLAP_DATA=$CI_BUILDS_DIR/flap_data \
            \
                $CI_REGISTRY_IMAGE/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA} \
                /bin/sh -c "while true; do sleep 1000; done"

        - mkdir -p $CI_BUILD_DIR/flap_data/system/data
        - echo "0.0.0.0" > $CI_BUILD_DIR/flap_data/system/data/fixed_ip.txt

        - docker exec flap flapctl start
        - docker exec flap flapctl users create_admin
        - docker exec flap flapctl tls generate_localhost flap.test

        # Install chromium: https://github.com/puppeteer/puppeteer/blob/master/docs/troubleshooting.md#running-on-alpine
        - >
            apk add --no-cache \
              chromium \
              nss \
              freetype \
              freetype-dev \
              harfbuzz \
              ca-certificates \
              ttf-freefont

        # Install nodejs and npm.
        - apk add nodejs npm python make

        # Don't download chromium during puppeteer installation.
        # shellcheck disable=SC2034
        - export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true

        # Install codecept and puppeteer.
        - cd core
        - npm install codeceptjs puppeteer mocha-junit-reporter

        # Run e2e tests
        - export FLAP_URL=flap.test
        - npx codeceptjs run --profile=chrome-ci --reporter mocha-junit-reporter
    artifacts:
        reports:
            junit: core/output/result.xml
