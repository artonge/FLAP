include:
    # Auto devop
    - template: Auto-DevOps.gitlab-ci.yml

variables:
    GIT_SUBMODULE_STRATEGY: recursive

stages:
  - build
  - setup
  - test
  - deploy  # dummy stage to follow the template guidelines
  - review
  - dast
  - staging
  - canary
  - production
  - incremental rollout 10%
  - incremental rollout 25%
  - incremental rollout 50%
  - incremental rollout 100%
  - performance
  - cleanup

test_script_executable:
    image: debian
    stage: test
    needs: []
    only: [branches]
    script:
        - find . -path './**/node_modules' -prune -o  -name '*.sh' ! -executable -print
        - test $(find . -path './**/node_modules' -prune -o  -name '*.sh' ! -executable -print | wc -l) == "0"

shellcheck:
    image: koalaman/shellcheck-alpine:latest
    stage: test
    needs: []
    only: [branches]
    before_script:
        - shellcheck --version
    script:
        - apk add git
        - git ls-files --exclude='*.sh' --ignored | xargs shellcheck --external-sources --shell=bash

test_dockerfile_sanity:
    image:
        name: instrumenta/conftest:latest
        entrypoint: [""]
    stage: test
    needs: []
    only: [branches]
    before_script:
        - conftest --version
    script:
        - find ./ -name Dockerfile | xargs -I {} conftest test --policy dockerfile-security.rego {}

.start_flap:
    image: docker:stable
    services:
        - name: docker:dind
          # We use flap.test instead of flap.localhost because chrome won't resolve *.localhost on another IP.
          alias: flap.local flap.test auth.flap.test home.flap.test files.flap.test mail.flap.test matrix.flap.test chat.flap.test coturn.flap.test jitsi.flap.test weblate.flap.test analytics.flap.test video.flap.test
    needs: [build]
    before_script:
        # Get DinD's ip.
        - FLAP_IP=$(cat /etc/hosts | grep flap.local | cut -f1)

        # Install git so it can be used in FLAP_IMAGE_TAG scripts.
        - apk add git

        # Share the docker container network with this container so it can talk to itself.
        #  ==> the network ports are beeing serve from the DinD container, that can be reach from the docker container but not from this container if we do not share the host network stack.
        # Add entry to the /etc/hosts file to resolve flap.local and *.flap.test
        - >
            docker run \
                --detach \
            \
                --name flap \
            \
                --network host \
                --add-host="flap.local:$FLAP_IP" \
                --add-host="flap.test:$FLAP_IP" \
                --add-host="auth.flap.test:$FLAP_IP" \
                --add-host="files.flap.test:$FLAP_IP" \
                --add-host="mail.flap.test:$FLAP_IP" \
                --add-host="matrix.flap.test:$FLAP_IP" \
                --add-host="chat.flap.test:$FLAP_IP" \
                --add-host="jitsi.flap.test:$FLAP_IP" \
                --add-host="weblate.flap.test:$FLAP_IP" \
                --add-host="analytics.flap.test:$FLAP_IP" \
                --add-host="video.flap.test:$FLAP_IP" \
            \
                --env LOG_DRIVER=json-file \
            \
                --volume /var/run/docker.sock:/var/run/docker.sock \
            \
                --volume $CI_BUILDS_DIR/flap_dir:$CI_BUILDS_DIR/flap_dir \
                --volume $CI_BUILDS_DIR/flap_data:$CI_BUILDS_DIR/flap_data \
                --volume $CI_BUILDS_DIR/flap_backup:$CI_BUILDS_DIR/flap_backup \
                --volume /etc/letsencrypt/live/flap:/etc/letsencrypt/live/flap \
            \
                --env FLAP_DIR=$CI_BUILDS_DIR/flap_dir \
                --env FLAP_DATA=$CI_BUILDS_DIR/flap_data \
                --env COMPOSE_HTTP_TIMEOUT=480 \
                --env CI_JOB_NAME=$CI_JOB_NAME \
            \
                $(eval $FLAP_IMAGE_TAG) \
                /bin/sh -c "while true; do sleep 1000; done"

        # Copy the content of flap:/opt/flap into flap:$CI_BUILDS_DIR/flap_dir.
        # This is necessary to be able to bind volumes to containers started from the flap container.
        # https://stackoverflow.com/questions/46437147/gitlab-ci-docker-in-docker-cant-create-volume
        - docker exec flap cp -rT /opt/flap $CI_BUILDS_DIR/flap_dir
        # Update the flapctl link so it maps to the new location.
        - docker exec flap ln -sf $CI_BUILDS_DIR/flap_dir/system/cli/flapctl.sh /bin/flapctl

        # Copy flapctl.env for pipeline.
        - mkdir --parents $CI_BUILDS_DIR/flap_data/system
        - cp $CI_BUILDS_DIR/flap_dir/system/flapctl.examples.d/pipeline.env $CI_BUILDS_DIR/flap_data/system/flapctl.env

        # Restore flap_data if it exists.
        - apk add tar
        - if [ -f flap.tar.gz ]; then tar -xzf flap.tar.gz -C $CI_BUILDS_DIR/..; fi
        - if [ -f flap.tar.gz ]; then docker exec flap flapctl setup flapenv; fi
        - if [ -f flap.tar.gz ]; then docker exec flap flapctl tls generate_localhost; fi
        - if [ -f flap.tar.gz ]; then docker exec flap flapctl backup restore; fi

        - docker exec flap flapctl start

# Run start_flap and CLI unit tests
test_cli:
    stage: test
    extends: .start_flap
    only: [branches]
    needs: [build]
    variables:
        FLAP_IMAGE_TAG: echo $CI_REGISTRY_IMAGE/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA}
    script:
        - docker exec flap flapctl test setup tls

# Start the last production version of flap, then update to $CI_COMMIT_REF_NAME.
.test_update:
    stage: test
    extends: .start_flap
    variables:
        FLAP_IMAGE_TAG: echo $CI_REGISTRY_IMAGE:$(eval $LATEST_TAG)
    needs: []
    script:
        - docker exec flap flapctl users create_admin
        - docker exec flap flapctl tls generate_localhost
        - docker exec flap flapctl restart
        - docker exec flap flapctl hooks post_domain_update

        # Add content to SOGo so pre_backup hooks does not fails.
        - docker exec flap_sogo sogo-tool create-folder theadmin Calendar TestCalendar
        # Sync nextcloud user base.
        - docker exec --user www-data flap_nextcloud php occ user:list

        - docker exec flap flapctl update $CI_COMMIT_REF_NAME

        - test "$(docker exec flap flapctl migrate status)" == ""

test_update_to_commit:
    extends: .test_update
    only: [branches]
    variables:
        LATEST_TAG: git tag --sort version:refname | tail -1

test_update_to_tag:
    extends: .test_update
    only: [tags]
    variables:
        LATEST_TAG: git tag --sort version:refname | grep -B 1 $CI_COMMIT_REF_NAME | grep -v $CI_COMMIT_REF_NAME

setup_with_serial_updates:
    stage: setup
    extends: .start_flap
    # only: [tags]
    needs: []
    allow_failure: true
    variables:
        FLAP_IMAGE_TAG: echo $CI_REGISTRY_IMAGE:$(git tag --sort version:refname | tail -3 | head -1)
    artifacts:
        paths:
            - flap.tar.gz
    script:
        - docker exec flap flapctl users create_admin
        - docker exec flap flapctl tls generate_localhost
        - docker exec flap flapctl restart
        - docker exec flap flapctl hooks post_domain_update

        # Add content to SOGo so pre_backup hooks does not fails.
        - docker exec flap_sogo sogo-tool create-folder theadmin Calendar TestCalendar
        # Sync nextcloud user base.
        - docker exec --user www-data flap_nextcloud php occ user:list

        - docker exec flap flapctl update

        - test "$(docker exec flap flapctl migrate status)" == ""

        # Backup $FLAP_DATA
        - docker exec flap flapctl backup
        - tar -czf flap.tar.gz $CI_BUILDS_DIR/flap_backup

setup_flap:
    stage: setup
    extends: .start_flap
    only: [branches]
    variables:
        FLAP_IMAGE_TAG: echo $CI_REGISTRY_IMAGE/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA}
    artifacts:
        paths:
            - flap.tar.gz
    script:
        - docker exec flap flapctl users create_admin
        - docker exec flap flapctl tls generate_localhost
        - docker exec flap flapctl restart
        - docker exec flap flapctl hooks post_domain_update

        # Add content to SOGo so pre_backup hooks does not fails.
        - docker exec flap_sogo sogo-tool create-folder theadmin Calendar TestCalendar
        # Sync nextcloud user base.
        - docker exec --user www-data flap_nextcloud php occ user:list

        # Backup $FLAP_DATA
        - docker exec flap flapctl backup
        - tar -czf flap.tar.gz $CI_BUILDS_DIR/flap_backup

.test_e2e:
    stage: test
    extends: .start_flap
    retry: 1
    artifacts:
        when: always
        reports:
            junit: home/output/result.xml
        paths:
            - home/e2e/output
    script:
        # Install chromium: https://github.com/puppeteer/puppeteer/blob/master/docs/troubleshooting.md#running-on-alpine
        - >
            apk add --no-cache \
              chromium \
              nss \
              freetype \
              freetype-dev \
              harfbuzz \
              ca-certificates \
              ttf-freefont

        - apk add nodejs npm python3 make

        # Don't download chromium during puppeteer installation.
        # shellcheck disable=SC2034
        - export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true

        # Install codecept and puppeteer.
        - cd ./home
        - npm install codeceptjs puppeteer mocha-junit-reporter

        # - mkdir -p e2e/tests/services
        - npm run e2e:copy

        - export FLAP_URL=flap.test

        # Run e2e tests.
        - npx codeceptjs run --profile=chrome-ci --reporter mocha-junit-reporter

test_e2e_current:
    extends: .test_e2e
    only: [branches]
    needs: [setup_flap]
    variables:
        SCREEN_WIDTH: "1920"
        SCREEN_HEIGHT: "1080"
        FLAP_IMAGE_TAG: echo $CI_REGISTRY_IMAGE/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA}

test_e2e_after_serial_updates:
    extends: .test_e2e
    # only: [tags]
    needs: [setup_with_serial_updates]
    allow_failure: true
    variables:
        SCREEN_WIDTH: "1920"
        SCREEN_HEIGHT: "1080"
        FLAP_IMAGE_TAG: echo $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}

build_disk_image:
    stage: build
    image: ubuntu:18.04
    when: manual
    only: [tags]
    allow_failure: true
    artifacts:
        name: "$CI_COMMIT_REF_NAME"
    script:
        # Setup ssh.
        - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts

        # Setting up armbian_build folder on the remote server if needed.
        - ssh root@flap.id 'git clone --depth 1 https://github.com/armbian/build /mnt/volume1/armbian_build || true'

        # Customize the userpatch install_flap script to use the current tag.
        - sed -i "s/\$VERSION/${CI_COMMIT_REF_NAME/\//\\\/}/g" ./system/img_build/userpatches/customize-image.sh
        - scp -r ./system/img_build/userpatches root@flap.id:/mnt/volume1/armbian_build/

        # Download currently used docker images so they can be loaded in the final image.
        # This is a long one-liner, sorry.
        # - It gets the image names in each docker-compose.yml.
        # - Then it ask docker to pull the image using the experimental flag "--platform"
        # - It finally use the `docker save` cmd to extract and zip the image to a final 'userpatches/overlay/{image_name}.tar.gz' file.
        # The final pull and extract is done on the remote server.
        - apt install -y python3 python3-pip jq
        - pip3 install yq
        - ssh root@flap.id 'rm -rf /mnt/volume1/armbian_build/userpatches/overlay/*.tar.gz'
        - find . -mindepth 2 -name docker-compose.yml | xargs -I{} yq -r '.services | to_entries[]| .value.image' {} | xargs -I{} ssh root@flap.id 'docker pull --platform=armhf {}; docker save {} | gzip > /mnt/volume1/armbian_build/userpatches/overlay/$(basename {}).tar.gz'

        # Clean previous output folder.
        - ssh root@flap.id 'rm -rf /mnt/volume1/armbian_build/output/images/*'

        # Build the image on the remote server.
        - ssh root@flap.id '/mnt/volume1/armbian_build/compile.sh BOARD=odroidxu4 BRANCH=current RELEASE=buster BUILD_MINIMAL=yes BUILD_DESKTOP=no KERNEL_ONLY=no KERNEL_CONFIGURE=no'

        # Compresse the image.
        - ssh root@flap.id 'gzip --fast --keep /mnt/volume1/armbian_build/output/images/Armbian_20.05.0-trunk_Odroidxu4_buster_current_5.4.23_minimal.img'

        # Store the image file in the root account.
        - ssh root@flap.id "mv /mnt/volume1/armbian_build/output/images/Armbian_20.05.0-trunk_Odroidxu4_buster_current_5.4.23_minimal.img.gz /root/flap-$CI_COMMIT_REF_SLUG-$(date +"%Y.%m.%d")-odroidxu4.img.gz"
