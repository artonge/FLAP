include:
    # Auto devop
    - template: Auto-DevOps.gitlab-ci.yml

variables:
    GIT_SUBMODULE_STRATEGY: recursive

.flap_docker_setup:
    image: docker:stable
    services:
        - name: docker:dind
          alias: flap.local flap.test auth.flap.test files.flap.test mail.flap.test matrix.flap.test chat.flap.test coturn.flap.test jitsi.flap.test weblate.flap.test

# Check shell scripts sanity.
shellcheck:
    image: koalaman/shellcheck-alpine:latest
    stage: test
    script:
        - apk add git
        - git ls-files --exclude='*.sh' --ignored | xargs shellcheck --external-sources --shell=bash

# Check shell scripts executability.
test_script_executable:
    image: ubuntu
    stage: test
    script:
        - apt-get update
        - apt-get install -y git
        - git ls-files --exclude='*.sh' --ignored | xargs -I{} ls -aslh {}
        - git ls-files --exclude='*.sh' --ignored | xargs -I{} test -x {}

# Run start_flap and CLI unit tests
system_test:
    only: [branches]
    stage: test
    image: docker:stable
    services: ["docker:dind"]
    script:
        # Start a flap instance with mappings to real folders.
        # We need mappings to real folders because docker will resolve its mappings using the real file system.
        # https://stackoverflow.com/questions/46437147/gitlab-ci-docker-in-docker-cant-create-volume
        - >
            docker run \
                --detach \
            \
                --name flap \
            \
                --env LOG_DRIVER=json-file \
            \
                --volume /var/run/docker.sock:/var/run/docker.sock \
            \
                --volume $CI_PROJECT_DIR:$CI_PROJECT_DIR \
                --volume $CI_BUILDS_DIR/flap_data:$CI_BUILDS_DIR/flap_data \
            \
                --env FLAP_DIR=$CI_PROJECT_DIR \
                --env FLAP_DATA=$CI_BUILDS_DIR/flap_data \
            \
                $CI_REGISTRY_IMAGE/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA} \
                /bin/sh -c "while true; do sleep 1000; done"

        # Use env vars set in flap_init_config.pipeline.yml.
        - cp $CI_PROJECT_DIR/system/plaforms_init_config/flap_init_config.pipeline.yml $CI_PROJECT_DIR/flap_init_config.yml

        - docker exec flap flapctl start
        - docker exec flap flapctl test setup tls

# Run start from a previous flap version.
# Then run the update procedure the the targeted commit or tag.
.update_test:
    stage: test
    extends: .flap_docker_setup
    script:
        # Get DinD's ip.
        - FLAP_IP=$(cat /etc/hosts | grep flap.local | cut -f1)

        - apk add git

        # Start a flap instance with mappings to real folders.
        # We need mappings to real folders because docker will resolve its mappings using the real file system.
        # https://stackoverflow.com/questions/46437147/gitlab-ci-docker-in-docker-cant-create-volume
        - >
            docker run \
                --detach \
            \
                --name flap_old \
            \
                --network host \
                --add-host="flap.local:$FLAP_IP" \
                --add-host="flap.test:$FLAP_IP" \
                --add-host="auth.flap.test:$FLAP_IP" \
                --add-host="files.flap.test:$FLAP_IP" \
                --add-host="mail.flap.test:$FLAP_IP" \
                --add-host="matrix.flap.test:$FLAP_IP" \
                --add-host="chat.flap.test:$FLAP_IP" \
                --add-host="jitsi.flap.test:$FLAP_IP" \
                --add-host="weblate.flap.test:$FLAP_IP" \
            \
                --env LOG_DRIVER=json-file \
            \
                --volume /var/run/docker.sock:/var/run/docker.sock \
            \
                --volume $CI_BUILDS_DIR/flap_dir:$CI_BUILDS_DIR/flap_dir \
                --volume $CI_BUILDS_DIR/flap_data:$CI_BUILDS_DIR/flap_data \
                --volume /etc/letsencrypt/live/flap:/etc/letsencrypt/live/flap \
            \
                --env FLAP_DIR=$CI_BUILDS_DIR/flap_dir \
                --env FLAP_DATA=$CI_BUILDS_DIR/flap_data \
            \
                $CI_REGISTRY_IMAGE:$(eval $LATEST_TAG) \
                /bin/sh -c "while true; do sleep 1000; done"

        # Copy the code to the real folder.
        - docker exec flap_old cp -rT /opt/flap $CI_BUILDS_DIR/flap_dir

        # Update the flapctl link so it maps to the new location.
        - docker exec flap_old ln -sf $CI_BUILDS_DIR/flap_dir/system/cli/flapctl.sh /bin/flapctl

        # Use env vars set in flap_init_config.pipeline.yml.
        - cp $CI_BUILDS_DIR/flap_dir/system/plaforms_init_config/flap_init_config.pipeline.yml $CI_BUILDS_DIR/flap_dir/flap_init_config.yml

        # Start the instance.
        - docker exec flap_old flapctl start
        - docker exec flap_old flapctl users create_admin
        - docker exec flap_old flapctl tls generate_localhost flap.test
        - docker exec flap_old flapctl restart
        - docker exec flap_old flapctl hooks post_domain_update

        # Update the instance.
        - docker exec flap_old flapctl update $CI_COMMIT_REF_NAME

test_update_to_commit:
    extends: .update_test
    only: [branches]
    variables:
        LATEST_TAG: git tag --sort version:refname | tail -1

test_update_to_tag:
    extends: .update_test
    only: [tags]
    variables:
        LATEST_TAG: git tag --sort version:refname | grep -B 1 $CI_COMMIT_REF_NAME | grep -v $CI_COMMIT_REF_NAME

# We use flap.test instead of flap.localhost because chrome won't resolve *.localhost on another IP.
.setup_flap:
    only: [branches]
    extends: .flap_docker_setup
    stage: test
    before_script:
        # Get DinD's ip.
        - FLAP_IP=$(cat /etc/hosts | grep flap.local | cut -f1)

        # Pass some flags env var.
        # Share the docker container network with this container so it can talk to itself.
        #  ==> the network ports are beeing serve from the DinD container, that can be reach from the docker container but not from this container if we do not share the host network stack.
        # Add entry to the /etc/hosts file to resolve flap.local and *.flap.test
        # Bind our working directories.
        - >
            docker run \
                --detach \
            \
                --name flap \
            \
                --network host \
                --add-host="flap.local:$FLAP_IP" \
                --add-host="flap.test:$FLAP_IP" \
                --add-host="auth.flap.test:$FLAP_IP" \
                --add-host="files.flap.test:$FLAP_IP" \
                --add-host="mail.flap.test:$FLAP_IP" \
                --add-host="matrix.flap.test:$FLAP_IP" \
                --add-host="chat.flap.test:$FLAP_IP" \
                --add-host="jitsi.flap.test:$FLAP_IP" \
                --add-host="weblate.flap.test:$FLAP_IP" \
            \
                --env LOG_DRIVER=json-file \
            \
                --volume /var/run/docker.sock:/var/run/docker.sock \
            \
                --volume $CI_PROJECT_DIR:$CI_PROJECT_DIR \
                --volume $CI_BUILDS_DIR/flap_data:$CI_BUILDS_DIR/flap_data \
                --volume $CI_BUILDS_DIR/flap_backup:$CI_BUILDS_DIR/flap_backup \
                --volume /etc/letsencrypt/live/flap:/etc/letsencrypt/live/flap \
            \
                --env FLAP_DIR=$CI_PROJECT_DIR \
                --env FLAP_DATA=$CI_BUILDS_DIR/flap_data \
            \
                $CI_REGISTRY_IMAGE/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA} \
                /bin/sh -c "while true; do sleep 1000; done"

        # Use env vars set in flap_init_config.pipeline.yml.
        - cp $CI_PROJECT_DIR/system/plaforms_init_config/flap_init_config.pipeline.yml $CI_PROJECT_DIR/flap_init_config.yml

        - docker exec flap flapctl start
        - docker exec flap flapctl users create_admin
        - docker exec flap flapctl tls generate_localhost
        - docker exec flap flapctl restart
        - docker exec flap flapctl hooks post_domain_update

.test_backup:
    extends: .setup_flap
    script:
        - mkdir /backup
        - docker exec flap_sogo sogo-tool create-folder theadmin Calendar TestCalendar
        - >
            docker exec \
                --env BACKUP_TOOL=$BACKUP_TOOL \
                --env $REPO_VAR=$CI_BUILDS_DIR/flap_backup \
                --env $PASSPHRASE_VAR=password \
                flap flapctl backup
        - >
            docker exec \
                --env BACKUP_TOOL=$BACKUP_TOOL \
                --env $REPO_VAR=$CI_BUILDS_DIR/flap_backup \
                --env $PASSPHRASE_VAR=password \
                flap flapctl backup restore

# Disabled for now.
# Error: Extended attributes are not supported on this filesystemtest_backup_borg:
#     extends: .test_backup
#     variables:
#         BACKUP_TOOL: borg
#         REPO_VAR: BORG_REPO
#         PASSPHRASE_VAR: BORG_PASSPHRASE

test_backup_restic:
    extends: .test_backup
    variables:
        BACKUP_TOOL: restic
        REPO_VAR: RESTIC_REPOSITORY
        PASSPHRASE_VAR: RESTIC_PASSWORD

e2e:
    extends: .setup_flap
    variables:
        SCREEN_WIDTH: "1920"
        SCREEN_HEIGHT: "1080"
    script:
        # Install chromium: https://github.com/puppeteer/puppeteer/blob/master/docs/troubleshooting.md#running-on-alpine
        - >
            apk add --no-cache \
              chromium \
              nss \
              freetype \
              freetype-dev \
              harfbuzz \
              ca-certificates \
              ttf-freefont

        - apk add nodejs npm python3 make

        # Don't download chromium during puppeteer installation.
        # shellcheck disable=SC2034
        - export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true

        # Install codecept and puppeteer.
        - cd core
        - npm install codeceptjs puppeteer mocha-junit-reporter

        # Run e2e tests
        - export FLAP_URL=flap.test
        - npx codeceptjs run --profile=chrome-ci --reporter mocha-junit-reporter
    artifacts:
        reports:
            junit: core/output/result.xml

build_disk_image:
    stage: build
    image: ubuntu:18.04
    when: manual
    only: [tags]
    allow_failure: true
    artifacts:
        name: "$CI_COMMIT_REF_NAME"
    script:
        # Setup ssh.
        - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts

        # Setting up armbian_build folder on the remote server if needed.
        - ssh root@flap.id 'git clone --depth 1 https://github.com/armbian/build /mnt/volume1/armbian_build || true'

        # Customize the userpatch install_flap script to use the current tag.
        - sed -i "s/\$VERSION/${CI_COMMIT_REF_NAME/\//\\\/}/g" ./system/img_build/userpatches/customize-image.sh
        - scp -r ./system/img_build/userpatches root@flap.id:/mnt/volume1/armbian_build/

        # Download currently used docker images so they can be loaded in the final image.
        # This is a long one-liner, sorry.
        # - It gets the image names in each docker-compose.yml.
        # - Then it ask docker to pull the image using the experimental flag "--platform"
        # - It finally use the `docker save` cmd to extract and zip the image to a final 'userpatches/overlay/{image_name}.tar.gz' file.
        # The final pull and extract is done on the remote server.
        - apt install -y python3 python3-pip jq
        - pip3 install yq
        - ssh root@flap.id 'rm -rf /mnt/volume1/armbian_build/userpatches/overlay/*.tar.gz'
        - find . -mindepth 2 -name docker-compose.yml | xargs -I{} yq -r '.services | to_entries[]| .value.image' {} | xargs -I{} ssh root@flap.id 'docker pull --platform=armhf {}; docker save {} | gzip > /mnt/volume1/armbian_build/userpatches/overlay/$(basename {}).tar.gz'

        # Clean previous output folder.
        - ssh root@flap.id 'rm -rf /mnt/volume1/armbian_build/output/images/*'

        # Build the image on the remote server.
        - ssh root@flap.id '/mnt/volume1/armbian_build/compile.sh BOARD=odroidxu4 BRANCH=current RELEASE=buster BUILD_MINIMAL=yes BUILD_DESKTOP=no KERNEL_ONLY=no KERNEL_CONFIGURE=no'

        # Compresse the image.
        - ssh root@flap.id 'gzip --fast --keep /mnt/volume1/armbian_build/output/images/Armbian_20.05.0-trunk_Odroidxu4_buster_current_5.4.23_minimal.img'

        # Store the image file in the root account.
        - ssh root@flap.id "mv /mnt/volume1/armbian_build/output/images/Armbian_20.05.0-trunk_Odroidxu4_buster_current_5.4.23_minimal.img.gz /root/flap-$CI_COMMIT_REF_SLUG-$(date +"%Y.%m.%d")-odroidxu4.img.gz"
